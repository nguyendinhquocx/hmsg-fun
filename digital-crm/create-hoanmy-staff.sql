-- Script t·∫°o nhanh nh√¢n vi√™n Ho√†n M·ªπ v√†o Supabase Auth v√† b·∫£ng users
-- M·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh: Hmsg@2025
-- L∆ØU √ù: auth.create_user() kh√¥ng kh·∫£ d·ª•ng, s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p thay th·∫ø

-- PH∆Ø∆†NG √ÅN 1: S·ª≠ d·ª•ng API endpoint (Khuy·∫øn ngh·ªã)
-- S·ª≠ d·ª•ng file: src/app/api/admin/create-user/route.ts
-- G·ªçi API ƒë·ªÉ t·∫°o t·ª´ng user:

/*
POST /api/admin/create-user
Content-Type: application/json

{
  "email": "khanh.tran@hoanmy.com",
  "password": "Hmsg@2025",
  "full_name": "Tr·∫ßn Th·ªã Khanh",
  "team": "CHC",
  "role": "user"
}
*/

-- PH∆Ø∆†NG √ÅN 2: T·∫°o tr·ª±c ti·∫øp trong Supabase Dashboard
-- 1. V√†o Authentication ‚Üí Users ‚Üí Add user
-- 2. ƒêi·ªÅn th√¥ng tin:
--    - Email: [email]
--    - Password: Hmsg@2025
--    - Auto Confirm User: YES
--    - User Metadata: {"full_name": "[t√™n]", "team": "[team]", "role": "[role]"}

-- PH∆Ø∆†NG √ÅN 3: Ch·ªâ t·∫°o trong b·∫£ng users tr∆∞·ªõc (ƒë·ªÉ test)
-- Sau ƒë√≥ t·∫°o Auth accounts th·ªß c√¥ng

-- ‚ö†Ô∏è  L∆ØU √ù: KH√îNG TH·ªÇ T·∫†O TR·ª∞C TI·∫æP V√ÄO B·∫¢NG USERS
-- B·∫£ng users c√≥ foreign key constraint v·ªõi auth.users
-- Ph·∫£i t·∫°o Supabase Auth accounts tr∆∞·ªõc!

-- SCRIPT N√ÄY CH·ªà D√ôNG ƒê·ªÇ SYNC SAU KHI ƒê√É T·∫†O AUTH ACCOUNTS
-- S·ª≠ d·ª•ng create-staff-api.js ƒë·ªÉ t·∫°o accounts t·ª± ƒë·ªông!

-- ‚ö†Ô∏è  C·∫¢NH B√ÅO: KH√îNG X√ìA D·ªÆ LI·ªÜU!
-- Script n√†y ch·ªâ d√πng ƒë·ªÉ SYNC, kh√¥ng x√≥a d·ªØ li·ªáu c≈©
-- N·∫øu c·∫ßn x√≥a d·ªØ li·ªáu test, h√£y s·ª≠ d·ª•ng ƒëi·ªÅu ki·ªán c·ª• th·ªÉ:
-- DELETE FROM public.users WHERE email IN ('test1@example.com', 'test2@example.com');

-- KH√îNG CH·∫†Y L·ªÜNH X√ìA CHUNG CHUNG NH∆Ø:
-- DELETE FROM public.users WHERE email LIKE '%@example.com'; -- NGUY HI·ªÇM!

-- SCRIPT SYNC: Ch·∫°y sau khi ƒë√£ t·∫°o Auth accounts
-- ƒê·ªìng b·ªô t·ª´ auth.users sang public.users
INSERT INTO public.users (id, email, full_name, team, role, created_at)
SELECT 
  au.id,
  au.email,
  COALESCE(au.raw_user_meta_data->>'full_name', au.email) as full_name,
  COALESCE(au.raw_user_meta_data->>'team', 'Unknown') as team,
  COALESCE(au.raw_user_meta_data->>'role', 'user') as role,
  NOW()
FROM auth.users au
WHERE au.email LIKE '%@hoanmy.com'
  AND NOT EXISTS (
    SELECT 1 FROM public.users pu WHERE pu.id = au.id
  )
ON CONFLICT (id) DO UPDATE SET
  email = EXCLUDED.email,
  full_name = EXCLUDED.full_name,
  team = EXCLUDED.team,
  role = EXCLUDED.role,
  updated_at = NOW();

-- Ki·ªÉm tra k·∫øt qu·∫£
SELECT 
  email,
  full_name,
  team,
  role,
  created_at
FROM public.users 
WHERE email LIKE '%@hoanmy.com'
ORDER BY team, full_name;

-- ƒê·∫øm s·ªë l∆∞·ª£ng theo team
SELECT 
  team,
  COUNT(*) as so_luong,
  STRING_AGG(full_name, ', ' ORDER BY full_name) as danh_sach
FROM public.users 
WHERE email LIKE '%@hoanmy.com'
GROUP BY team
ORDER BY team;

/*
=== H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG ===

Do auth.create_user() kh√¥ng kh·∫£ d·ª•ng, c√≥ 3 ph∆∞∆°ng √°n:

üéØ PH∆Ø∆†NG √ÅN 1: S·ª¨ D·ª§NG API (KHUY·∫æN NGH·ªä)
1. Ch·∫°y dev server: npm run dev
2. S·ª≠ d·ª•ng Postman ho·∫∑c curl ƒë·ªÉ g·ªçi API:

curl -X POST http://localhost:3000/api/admin/create-user \
  -H "Content-Type: application/json" \
  -d '{
    "email": "khanh.tran@hoanmy.com",
    "password": "Hmsg@2025",
    "full_name": "Tr·∫ßn Th·ªã Khanh",
    "team": "CHC",
    "role": "user"
  }'

3. L·∫∑p l·∫°i cho 14 nh√¢n vi√™n

üèóÔ∏è PH∆Ø∆†NG √ÅN 2: SUPABASE DASHBOARD
1. V√†o Supabase Dashboard ‚Üí Authentication ‚Üí Users
2. Click "Add user" cho t·ª´ng nh√¢n vi√™n
3. ƒêi·ªÅn:
   - Email: [email nh√¢n vi√™n]
   - Password: Hmsg@2025
   - Auto Confirm User: ‚úÖ YES
   - User Metadata: 
     {
       "full_name": "[T√™n ƒë·∫ßy ƒë·ªß]",
       "team": "[Team]",
       "role": "user" (ho·∫∑c "admin" cho Nguy·ªÖn ƒê√¨nh Qu·ªëc)
     }
4. Sau ƒë√≥ ch·∫°y script sync ƒë·ªÉ ƒë∆∞a v√†o b·∫£ng users

‚ö° PH∆Ø∆†NG √ÅN 3: CH·ªà T·∫†O B·∫¢NG USERS
1. Ch·∫°y script SQL n√†y ƒë·ªÉ t·∫°o records trong b·∫£ng users
2. T·∫°o Auth accounts th·ªß c√¥ng sau
3. D√πng ƒë·ªÉ test nhanh giao di·ªán

=== SCRIPT SYNC SAU KHI T·∫†O AUTH ACCOUNTS ===

INSERT INTO public.users (id, email, full_name, team, role, created_at)
SELECT 
  au.id,
  au.email,
  COALESCE(au.raw_user_meta_data->>'full_name', au.email) as full_name,
  COALESCE(au.raw_user_meta_data->>'team', 'CHC') as team,
  COALESCE(au.raw_user_meta_data->>'role', 'user') as role,
  NOW()
FROM auth.users au
WHERE au.email LIKE '%@hoanmy.com'
  AND NOT EXISTS (
    SELECT 1 FROM public.users pu WHERE pu.id = au.id
  )
ON CONFLICT (id) DO UPDATE SET
  email = EXCLUDED.email,
  full_name = EXCLUDED.full_name,
  team = EXCLUDED.team,
  role = EXCLUDED.role,
  updated_at = NOW();

=== DANH S√ÅCH 14 NH√ÇN VI√äN ===

CHC (4): Tr·∫ßn Th·ªã Khanh, L√™ Th·ªã Th√∫y H·ªìng, B√πi Th·ªã Nh∆∞ Qu·ª≥nh, Ph·∫°m Th·ªã Thanh Th√πy
Package (2): Ng√¥ Th·ªã Lan Anh, Nguy·ªÖn Th·ªã Di·ªÖm Tr√∫c
Referral (4): Nguy·ªÖn Th·ªã Xu√¢n Trang, Mai L√™ B·∫£o Tr√¢m, D∆∞∆°ng Thanh V∆∞∆°ng, Tr·ªãnh V≈© Phong
PHI (1): Tr·∫ßn Th·ªã Ph∆∞∆°ng Phi
Digital (1): Nguy·ªÖn ƒê√¨nh Qu·ªëc (ADMIN)
Manager (2): Tr·∫ßn Ho√†ng Lu√¢n, L√™ Th·ªã Kim Ph·ª•ng

=== L∆ØU √ù ===

- M·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh: Hmsg@2025
- Ch·ªâ c√≥ Nguy·ªÖn ƒê√¨nh Qu·ªëc c√≥ role 'admin'
- T·∫•t c·∫£ users kh√°c c√≥ role 'user'
- Email domain: @hoanmy.com
- C·∫ßn g·ª≠i th√¥ng tin ƒëƒÉng nh·∫≠p cho nh√¢n vi√™n sau khi t·∫°o
*/